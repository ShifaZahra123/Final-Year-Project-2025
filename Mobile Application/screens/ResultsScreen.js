import React, { useState, useEffect } from 'react';
import {
  View,
  StyleSheet,
  ScrollView,
  Image,
  Share,
  Linking,
  Dimensions,
} from 'react-native';
import {
  Card,
  Title,
  Paragraph,
  Button,
  Chip,
  Text,
  Surface,
  Divider,
  ActivityIndicator,
  IconButton,
  Avatar,
  List,
  Badge,
} from 'react-native-paper';
import { LinearGradient } from 'expo-linear-gradient';
import * as Sharing from 'expo-sharing';
import * as FileSystem from 'expo-file-system';
import { colors } from '../constants/colors';
import { theme } from '../constants/theme';
import Toast from 'react-native-toast-message';

const { width } = Dimensions.get('window');

const ResultsScreen = ({ route, navigation }) => {
  const { analysisData, resultId, imageUri, imageMetadata } = route.params;
  const [downloadingReport, setDownloadingReport] = useState(false);
  const [analysisComplete, setAnalysisComplete] = useState(false);

  useEffect(() => {
    // Simulate analysis completion animation
    const timer = setTimeout(() => {
      setAnalysisComplete(true);
    }, 1000);

    return () => clearTimeout(timer);
  }, []);

  const getQualityColor = (value, type) => {
    const colorMap = {
      'Fresh': colors.success,
      'Medium': colors.warning,
      'Stale': colors.error,
      'Good': colors.success,
      'Fair': colors.warning,
      'Poor': colors.error,
      'High': type === 'confidence' ? colors.success : colors.warning,
      'Medium': type === 'confidence' ? colors.warning : colors.info,
      'Low': type === 'confidence' ? colors.error : colors.info,
    };
    return colorMap[value] || colors.gray;
  };

  const getQualityIcon = (value) => {
    const iconMap = {
      'Fresh': 'check-circle',
      'Medium': 'alert-circle',
      'Stale': 'close-circle',
      'Good': 'check-circle',
      'Fair': 'alert-circle',
      'Poor': 'close-circle',
      'High': 'trending-up',
      'Low': 'trending-down',
    };
    return iconMap[value] || 'information';
  };

  const getConfidenceLevel = (confidence) => {
    if (confidence >= 80) return 'High';
    if (confidence >= 60) return 'Medium';
    return 'Low';
  };

  const downloadReport = async () => {
    setDownloadingReport(true);
    
    try {
      const response = await fetch(`http://localhost:8000/api/download-report/${resultId}`);
      
      if (!response.ok) {
        throw new Error('Failed to generate report');
      }

      const blob = await response.blob();
      
      // Create a temporary file
      const filename = `meat-quality-report-${new Date().getTime()}.pdf`;
      const fileUri = `${FileSystem.documentDirectory}${filename}`;
      
      // Convert blob to base64 and write to file
      const reader = new FileReader();
      reader.onload = async () => {
        const base64Data = reader.result.split(',')[1];
        await FileSystem.writeAsStringAsync(fileUri, base64Data, {
          encoding: FileSystem.EncodingType.Base64,
        });
        
        // Share the file
        if (await Sharing.isAvailableAsync()) {
          await Sharing.shareAsync(fileUri, {
            mimeType: 'application/pdf',
            dialogTitle: 'Download Meat Quality Report',
          });
        }
        
        Toast.show({
          type: 'success',
          text1: 'Report Downloaded',
          text2: 'PDF report has been saved and shared',
        });
      };
      reader.readAsDataURL(blob);
      
    } catch (error) {
      console.error('Download error:', error);
      Toast.show({
        type: 'error',
        text1: 'Download Failed',
        text2: error.message || 'Could not download report',
      });
    } finally {
      setDownloadingReport(false);
    }
  };

  const shareResults = async () => {
    try {
      const confidence = getConfidenceLevel(analysisData.confidence || 0);
      const message = `Meat Quality Analysis Results:
      
🥩 Type: ${analysisData.type || 'Unknown'}
✨ Freshness: ${analysisData.freshness || 'N/A'}
🧈 Fat Content: ${analysisData.fat_content || 'N/A'}
🔍 Purity: ${analysisData.purity || 'N/A'}
📊 Confidence: ${confidence}

Generated by Meat Quality App`;

      await Share.share({
        message,
        title: 'Meat Quality Analysis Results',
      });
    } catch (error) {
      console.error('Share error:', error);
      Toast.show({
        type: 'error',
        text1: 'Share Failed',
        text2: 'Could not share results',
      });
    }
  };

  const renderQualityCard = (title, value, description, type = 'default', icon) => (
    <Surface style={styles.qualityCard} elevation={2}>
      <View style={styles.qualityHeader}>
        <Avatar.Icon
          size={40}
          icon={icon || getQualityIcon(value)}
          style={[
            styles.qualityIcon,
            { backgroundColor: getQualityColor(value, type) + '20' }
          ]}
          color={getQualityColor(value, type)}
        />
        <View style={styles.qualityInfo}>
          <Title style={styles.qualityTitle}>{title}</Title>
          <Chip
            mode="flat"
            style={[
              styles.qualityChip,
              { backgroundColor: getQualityColor(value, type) + '20' }
            ]}
            textStyle={[
              styles.qualityChipText,
              { color: getQualityColor(value, type) }
            ]}
          >
            {value || 'Unknown'}
          </Chip>
        </View>
      </View>
      {description && (
        <Paragraph style={styles.qualityDescription}>
          {description}
        </Paragraph>
      )}
    </Surface>
  );

  const getRecommendations = () => {
    const recommendations = [];
    
    if (analysisData.freshness === 'Fresh') {
      recommendations.push({
        type: 'success',
        icon: 'check-circle',
        text: 'Meat appears fresh and safe for consumption'
      });
    } else if (analysisData.freshness === 'Medium') {
      recommendations.push({
        type: 'warning',
        icon: 'alert-circle',
        text: 'Cook thoroughly before consumption'
      });
    } else if (analysisData.freshness === 'Stale') {
      recommendations.push({
        type: 'error',
        icon: 'close-circle',
        text: 'Not recommended for consumption'
      });
    }

    if (analysisData.fat_content === 'High') {
      recommendations.push({
        type: 'info',
        icon: 'knife',
        text: 'Consider trimming excess fat before cooking'
      });
    } else if (analysisData.fat_content === 'Low') {
      recommendations.push({
        type: 'info',
        icon: 'oil',
        text: 'Consider marinating to enhance flavor'
      });
    }

    if (analysisData.purity === 'Poor') {
      recommendations.push({
        type: 'warning',
        icon: 'magnify',
        text: 'Inspect for contaminants before use'
      });
    }

    return recommendations;
  };

  const formatDate = (dateString) => {
    if (!dateString) return new Date().toLocaleString();
    return new Date(dateString).toLocaleString();
  };

  if (!analysisComplete) {
    return (
      <LinearGradient
        colors={[colors.background, colors.primaryLight + '10']}
        style={styles.container}
      >
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={colors.primary} />
          <Title style={styles.loadingTitle}>Preparing Results...</Title>
          <Paragraph style={styles.loadingText}>
            Please wait while we compile your analysis
          </Paragraph>
        </View>
      </LinearGradient>
    );
  }

  return (
    <LinearGradient
      colors={[colors.background, colors.primaryLight + '10']}
      style={styles.container}
    >
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        {/* Header */}
        <View style={styles.header}>
          <IconButton
            icon="arrow-left"
            size={24}
            iconColor={colors.primary}
            onPress={() => navigation.goBack()}
            style={styles.backButton}
          />
          <View style={styles.headerContent}>
            <Title style={styles.headerTitle}>Analysis Results</Title>
            <Text style={styles.headerSubtitle}>
              {formatDate(new Date().toISOString())}
            </Text>
          </View>
        </View>

        {/* Image Display */}
        {imageUri && (
          <Card style={styles.imageCard}>
            <Card.Content>
              <Image source={{ uri: imageUri }} style={styles.analysisImage} />
              {imageMetadata && (
                <View style={styles.imageInfoContainer}>
                  <Text style={styles.imageInfo}>
                    {imageMetadata.width}x{imageMetadata.height} • {Math.round(imageMetadata.size / 1024)}KB
                  </Text>
                </View>
              )}
            </Card.Content>
          </Card>
        )}

        {/* Overall Score */}
        <Card style={styles.scoreCard}>
          <Card.Content>
            <View style={styles.scoreContainer}>
              <View style={styles.scoreCircle}>
                <Text style={styles.scoreText}>
                  {analysisData.confidence || 85}%
                </Text>
                <Text style={styles.scoreLabel}>Confidence</Text>
              </View>
              <View style={styles.scoreDetails}>
                <Title style={styles.scoreTitle}>Overall Assessment</Title>
                <Paragraph style={styles.scoreDescription}>
                  {analysisData.overall_assessment || 'Analysis completed successfully with good confidence levels.'}
                </Paragraph>
              </View>
            </View>
          </Card.Content>
        </Card>

        {/* Quality Metrics */}
        <View style={styles.metricsContainer}>
          <Title style={styles.sectionTitle}>Quality Metrics</Title>
          
          {renderQualityCard(
            'Meat Type',
            analysisData.type || 'Unknown',
            'Identified based on visual characteristics',
            'default',
            'food-steak'
          )}

          {renderQualityCard(
            'Freshness',
            analysisData.freshness || 'Medium',
            'Assessed based on color, texture, and appearance',
            'freshness',
            'clock-outline'
          )}

          {renderQualityCard(
            'Fat Content',
            analysisData.fat_content || 'Medium',
            'Visible fat distribution and marbling',
            'default',
            'oil'
          )}

          {renderQualityCard(
            'Purity',
            analysisData.purity || 'Good',
            'Contamination and quality indicators',
            'default',
            'shield-check'
          )}
        </View>

        {/* Recommendations */}
        <Card style={styles.recommendationsCard}>
          <Card.Content>
            <Title style={styles.sectionTitle}>Recommendations</Title>
            <View style={styles.recommendationsList}>
              {getRecommendations().map((recommendation, index) => (
                <View key={index} style={styles.recommendationItem}>
                  <Avatar.Icon
                    size={32}
                    icon={recommendation.icon}
                    style={[
                      styles.recommendationIcon,
                      { backgroundColor: colors[recommendation.type] + '20' }
                    ]}
                    color={colors[recommendation.type]}
                  />
                  <Text style={styles.recommendationText}>
                    {recommendation.text}
                  </Text>
                </View>
              ))}
            </View>
          </Card.Content>
        </Card>

        {/* Action Buttons */}
        <View style={styles.actionContainer}>
          <Button
            mode="contained"
            onPress={downloadReport}
            loading={downloadingReport}
            disabled={downloadingReport}
            style={styles.downloadButton}
            contentStyle={styles.buttonContent}
            labelStyle={styles.buttonLabel}
            icon="download"
          >
            {downloadingReport ? 'Generating PDF...' : 'Download Report'}
          </Button>

          <Button
            mode="outlined"
            onPress={shareResults}
            style={styles.shareButton}
            contentStyle={styles.buttonContent}
            labelStyle={styles.outlineButtonLabel}
            icon="share"
          >
            Share Results
          </Button>

          <Button
            mode="text"
            onPress={() => navigation.navigate('Upload')}
            style={styles.newAnalysisButton}
            labelStyle={styles.textButtonLabel}
            icon="plus"
          >
            New Analysis
          </Button>
        </View>
      </ScrollView>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
    padding: theme.spacing.md,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: theme.spacing.xl,
  },
  loadingTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: colors.primary,
    marginTop: theme.spacing.lg,
    marginBottom: theme.spacing.sm,
  },
  loadingText: {
    fontSize: 16,
    color: colors.textLight,
    textAlign: 'center',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: theme.spacing.lg,
  },
  backButton: {
    backgroundColor: colors.primaryLight + '20',
  },
  headerContent: {
    flex: 1,
    marginLeft: theme.spacing.sm,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: colors.primary,
  },
  headerSubtitle: {
    fontSize: 14,
    color: colors.textLight,
  },
  imageCard: {
    marginBottom: theme.spacing.lg,
    borderRadius: theme.borderRadius.lg,
    elevation: theme.elevations.level2,
  },
  analysisImage: {
    width: '100%',
    height: 200,
    borderRadius: theme.borderRadius.md,
    marginBottom: theme.spacing.sm,
  },
  imageInfoContainer: {
    alignItems: 'center',
  },
  imageInfo: {
    fontSize: 12,
    color: colors.textLight,
  },
  scoreCard: {
    marginBottom: theme.spacing.lg,
    borderRadius: theme.borderRadius.lg,
    elevation: theme.elevations.level2,
  },
  scoreContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  scoreCircle: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: colors.primary + '20',
    borderWidth: 4,
    borderColor: colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: theme.spacing.md,
  },
  scoreText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: colors.primary,
  },
  scoreLabel: {
    fontSize: 10,
    color: colors.primary,
  },
  scoreDetails: {
    flex: 1,
  },
  scoreTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: colors.primary,
    marginBottom: theme.spacing.xs,
  },
  scoreDescription: {
    fontSize: 14,
    color: colors.textLight,
    lineHeight: 20,
  },
  metricsContainer: {
    marginBottom: theme.spacing.lg,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: colors.primary,
    marginBottom: theme.spacing.md,
  },
  qualityCard: {
    marginBottom: theme.spacing.md,
    borderRadius: theme.borderRadius.md,
    padding: theme.spacing.md,
    elevation: theme.elevations.level1,
  },
  qualityHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: theme.spacing.sm,
  },
  qualityIcon: {
    marginRight: theme.spacing.sm,
  },
  qualityInfo: {
    flex: 1,
  },
  qualityTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: colors.text,
    marginBottom: theme.spacing.xs,
  },
  qualityChip: {
    alignSelf: 'flex-start',
  },
  qualityChipText: {
    fontSize: 12,
    fontWeight: 'bold',
  },
  qualityDescription: {
    fontSize: 14,
    color: colors.textLight,
    lineHeight: 20,
  },
  recommendationsCard: {
    marginBottom: theme.spacing.lg,
    borderRadius: theme.borderRadius.lg,
    elevation: theme.elevations.level2,
  },
  recommendationsList: {
    marginTop: theme.spacing.sm,
  },
  recommendationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: theme.spacing.md,
  },
  recommendationIcon: {
    marginRight: theme.spacing.sm,
  },
  recommendationText: {
    flex: 1,
    fontSize: 14,
    color: colors.text,
    lineHeight: 20,
  },
  actionContainer: {
    marginBottom: theme.spacing.lg,
  },
  downloadButton: {
    marginBottom: theme.spacing.md,
    borderRadius: theme.borderRadius.md,
  },
  shareButton: {
    marginBottom: theme.spacing.md,
    borderRadius: theme.borderRadius.md,
    borderColor: colors.primary,
  },
  newAnalysisButton: {
    marginTop: theme.spacing.sm,
  },
  buttonContent: {
    paddingVertical: theme.spacing.sm,
  },
  buttonLabel: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  outlineButtonLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: colors.primary,
  },
  textButtonLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: colors.primary,
  },
});

export default ResultsScreen; 